install.packages("~/OneDrive/WorkDrive/R/Packages/ProcessCapability_0.1.0.tar.gz", repos = NULL, type = "source")
remove.packages("ProcessCapability")
document()
library(roxygen2)
document()
library(devtools)
document()
install.packages("~/OneDrive/WorkDrive/R/Packages/ProcessCapability_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/OneDrive/WorkDrive/R/R_package_dev/ProcessCapability_0.1.1.tar.gz", repos = NULL, type = "source")
remove.packages('ProcessCapability')
install.packages("~/OneDrive/WorkDrive/R/R_package_dev/ProcessCapability_0.1.1.tar.gz", repos = NULL, type = "source")
library(ProcessCapability)
fun_proCap_binom_plot
remove.packages("ProcessCapability")
install.packages("~/OneDrive/WorkDrive/R/R_package_dev/ProcessCapability_0.1.3.tar.gz", repos = NULL, type = "source")
# remove NA
x <- x[! is.na(x)]
library(ProcessCapability)
fun_proCap_binom_plot
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
source("./R/ProcessCapability.R")
dir <- "~/OneDrive/WorkDrive/R/R_package_dev/R_codes_for_test"
load(file= file.path(dir, "spcChart_data.RData"))
# * Normal distribution ------------------------------------------------------------------------
Chart_type <- "Xbar-R"
data <- data_demo[[Chart_type]]$data %>% arrange(DTime)
pCtrl <- data_demo[[Chart_type]]$pCtrl
df <- data %>%
select(DTime, Value, Lot, Product, Stage, Machine_id)
source("./R/ProcessCapability.R")
# test fun_Cp
fun_Cp(data = df$Value)
# test fun_Cp
fun_Cp(data = df$Value, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp(data = df$Value, group = select(df, Lot, Stage), USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp
# test fun_Cp
data = df$Value; group = select(df; Lot, Stage) USL = pCtrl$USL target = pCtrl$CS LSL = pCtrl$LSL
df <- data.frame(group = group, value = data)
# test fun_Cp
data = df$Value; group = select(df, Lot, Stage); USL = pCtrl$USL; target = pCtrl$CS; LSL = pCtrl$LSL
# * Normal distribution ------------------------------------------------------------------------
Chart_type <- "Xbar-R"
da <- data_demo[[Chart_type]]$data %>% arrange(DTime)
pCtrl <- data_demo[[Chart_type]]$pCtrl
df <- da %>%
select(DTime, Value, Lot, Product, Stage, Machine_id)
# test fun_Cp
data = df$Value; group = select(df, Lot, Stage); USL = pCtrl$USL; target = pCtrl$CS; LSL = pCtrl$LSL
fun_Cp(data = df$Value, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp(data = df$Value, group = select(df, Lot, Stage), USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
df <- data.frame(group = group, value = data)
df <- df[! is.na(df$value), ]
# d2
d2 <- c(1.128,1.693,2.059,2.326,2.534,2.704,2.847,2.97,3.078)
#=== count mean and standard variation of overall data
sample_size <- nrow(df)
sample_mean <- round(mean(df$value), 3)
StDev_overall <- round(sd(df$value), 3)
# within group analysis
no_groups <- unique(group)
if (length(no_groups) >= 2) {
df1 <- df %>%
group_by(group) %>%
summarise(count = n(),
range = max(value) - min(value),
sd = sd(value))
sd_esti <- c()
for (i in 1:nrow(df1)) {
n = df1$count[i]
if (n  >= 2) {
if (n <= 9) {
sd_p <- df1$range[i] / d2[n-1]
} else {
c4<- sqrt(2 / (n-1)) * gamma(n/2) / gamma((n-1) / 2)
sd_p <- df1$sd[i] / c4
}
sd_esti <- c(sd_esti, sd_p)
}
StDev_within <- round(mean(sd_esti), 3)
} else {
StDev_within <- NA
}
no_groups
# test fun_Cp
data = df$Value; group = select(df, Lot); USL = pCtrl$USL; target = pCtrl$CS; LSL = pCtrl$LSL
df <- da %>%
select(DTime, Value, Lot, Product, Stage, Machine_id)
# test fun_Cp
data = df$Value; group = select(df, Lot); USL = pCtrl$USL; target = pCtrl$CS; LSL = pCtrl$LSL
fun_Cp(data = df$Value, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
group
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
df <- data.frame(group = group, value = data)
df <- df[! is.na(df$value), ]
# d2
d2 <- c(1.128,1.693,2.059,2.326,2.534,2.704,2.847,2.97,3.078)
#=== count mean and standard variation of overall data
sample_size <- nrow(df)
sample_mean <- round(mean(df$value), 3)
StDev_overall <- round(sd(df$value), 3)
# within group analysis
no_groups <- unique(group)
no_groups
(length(no_groups) >= 2)
length(no_groups)
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
# within group analysis
no_groups <- unique(group)
no_groups
length(no_groups)
group= df$Lot
# within group analysis
no_groups <- unique(group)
length(no_groups)
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
df <- da %>%
select(DTime, Value, Lot, Product, Stage, Machine_id)
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("sample");
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("group") %>% [[1]];
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("group") %>% [1];
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("group") %>% .[1];
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("group")
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp(data = df$Value, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
fun_Cp(data = df$Value, group = group$group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
# test fun_Cp
data = df$Value; group <- select(df, Lot, Stage) %>% unite("group") %>% .$group
fun_Cp(data = df$Value, group = group, USL = pCtrl$USL, target = pCtrl$CS, LSL = pCtrl$LSL)
# test Q-Q plot
QQ_plot(data = data)
library(ggplot2)
# test Q-Q plot
QQ_plot(data = data)
library(setGplot)
# test Q-Q plot
QQ_plot(data = data)
QQ_plot(data, group= df$Product)
# test Plot_hist_norm
Plot_hist_norm(data = data)
# test QQ_plot
df_info <- select(df, Lot, Stage)
QQ_plot(data = data, df_info = df_info)
fun_proCap_norm_plot(data, df_info = df_info)
li <- fun_proCap_norm_plot(data, df_info = df_info)
li$qq_plot
li$hist_plot
# test fun_proCap_norm_plot
df_info <- select(df, Lot, Stage, Machine_id)
li <- fun_proCap_norm_plot(data, df_info = df_info)
li$qq_plot
info_names <- c("lot", "stage", "machine id")
li <- fun_proCap_norm_plot(data, df_info = df_info)
li$qq_plot
li <- fun_proCap_norm_plot(data, df_info = df_info, info_names = info_names)
li$qq_plot
# * p-chart/np-chart -------------------------------------------------------------------
Chart_type <- "p"
da <- data_demo[[Chart_type]]$data
pCtrl <- data_demo[[Chart_type]]$pCtrl
pCtrl
# test fun_proCap_binom_plot
data = da$Value; size= da$Size;
fun_proCap_binom_plot(size, data)
# test fun_proCap_binom_plot
data = da$Value; size= da$Size;
fun_proCap_binom_plot(size, data)
library(fitdistrplus)
fun_proCap_binom_plot(size, data)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(setGplot)
library(fitdistrplus)
source("./R/ProcessCapability.R")
dir <- "~/OneDrive/WorkDrive/R/R_package_dev/R_codes_for_test"
load(file= file.path(dir, "spcChart_data.RData"))
# * p-chart/np-chart -------------------------------------------------------------------
Chart_type <- "p"
da <- data_demo[[Chart_type]]$data
pCtrl <- data_demo[[Chart_type]]$pCtrl
# test fun_proCap_binom_plot
data = da$Value; size= da$Size;
fun_proCap_binom_plot(size, data)
li <- fun_proCap_binom_plot(size, data, df_info = df_info)
# test fun_proCap_binom_plot
df_info <- select(da, Lot, Stage, Machine_id)
info_names <- c("lot", "stage", "machine id")
# test fun_proCap_binom_plot
df_info <- select(da, Lot, Stage, Machine_id)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(setGplot)
library(fitdistrplus)
source("./R/ProcessCapability.R")
dir <- "~/OneDrive/WorkDrive/R/R_package_dev/R_codes_for_test"
load(file= file.path(dir, "spcChart_data.RData"))
# * p-chart/np-chart -------------------------------------------------------------------
Chart_type <- "p"
da <- data_demo[[Chart_type]]$data
pCtrl <- data_demo[[Chart_type]]$pCtrl
# test fun_proCap_binom_plot
df_info <- select(da, Lot, Stage, Machine_id)
df_info <- select(da, Lot, Stage)
library(fitdistrplus)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(setGplot)
source("./R/ProcessCapability.R")
dir <- "~/OneDrive/WorkDrive/R/R_package_dev/R_codes_for_test"
load(file= file.path(dir, "spcChart_data.RData"))
# * p-chart/np-chart -------------------------------------------------------------------
Chart_type <- "p"
da <- data_demo[[Chart_type]]$data
pCtrl <- data_demo[[Chart_type]]$pCtrl
# test fun_proCap_binom_plot
df_info <- select(da, Lot, Stage, Machine_id)
info_names <- c("lot", "stage", "machine id")
data = da$Value; size= da$Size;
li <- fun_proCap_binom_plot(size, data, df_info = df_info)
li$qq_plot
# * Poisson distribution ---------------------------------------------------------------------------
Chart_type <- "u"
data <- data_demo[[Chart_type]]$data
iu <- data_demo[[Chart_type]]$iu
pCtrl <- data_demo[[Chart_type]]$pCtrl
# test fun_proCap_pois_plot
df_info <- select(da, Lot, Stage, Machine_id)
info_names <- c("lot", "stage", "machine id")
data = da$Value; size= da$Size;
li <- fun_proCap_pois_plot(size, data, iu, df_info = df_info)
# * Poisson distribution ---------------------------------------------------------------------------
Chart_type <- "u"
da <- data_demo[[Chart_type]]$data
iu <- data_demo[[Chart_type]]$iu
pCtrl <- data_demo[[Chart_type]]$pCtrl
# test fun_proCap_pois_plot
df_info <- select(da, Lot, Stage, Machine_id)
info_names <- c("lot", "stage", "machine id")
data = da$Value; size= da$Size;
li <- fun_proCap_pois_plot(size, data, iu, df_info = df_info)
# Form data frame
df <- data.frame(Size= size, Value= data)
#--- Statistics
ample_size <- sum(data, na.rm = TRUE)
df <- df %>%
mutate(No_iu = Size / iu, u = round(Value / No_iu))
ubar <- round(fitdist(df$u, "pois")$estimate)
head <- c("Mean    ", "Lower CI", "Upper CI")
pois <- poisson.test(ubar)
dpu <- round(as.vector(c(pois$estimate, pois$conf.int)), 2)
statistic <- data.frame(sample_size= sample_size, USL= USL, target= target,
LSL= LSL, inspect_unit= iu,
defect_mean= dpu[1], lower_CI= dpu[2],
upper_CI= dpu[3])
# * Function to plot poisson process capability analysis -----
#' @title Poisson process capability analysis
#' @param size vector of (inspection) size
#' @param data vector of data
#' @param iu inspection unit, how many samples inspected per unit
#' @param USL
#' @param target
#' @param LSL
#' @export
fun_proCap_pois_plot <- function(size, data, iu, USL = NA, target = NA, LSL = NA,
df_info= NULL, info_names= NULL, bar_fill= "#36648B") {
# Form data frame
df <- data.frame(Size= size, Value= data)
#--- Statistics
sample_size <- sum(data, na.rm = TRUE)
df <- df %>%
mutate(No_iu = Size / iu, u = round(Value / No_iu))
ubar <- round(fitdist(df$u, "pois")$estimate)
#ubar <- round(sum(df$Value) / sum(df$No_iu))
head <- c("Mean    ", "Lower CI", "Upper CI")
pois <- poisson.test(ubar)
dpu <- round(as.vector(c(pois$estimate, pois$conf.int)), 2)
statistic <- data.frame(sample_size= sample_size, USL= USL, target= target,
LSL= LSL, inspect_unit= iu,
defect_mean= dpu[1], lower_CI= dpu[2],
upper_CI= dpu[3])
#--- Plot
# Q-Q plot
qq_plot <- QQ_plot(data, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
# Histogram
plot_spec <- c("USL" = USL, "target" = target, "LSL" = LSL)
hist_plot <- Plot_hist_attr(data, plot_spec, title = "Sample distribution",
xlab= "Defect per Unit", ylab= "Frequency",
bar_fill = bar_fill)
# Return
list(sample_statistic= statistic, qq_plot= qq_plot, hist_plot= hist_plot)
}
li <- fun_proCap_pois_plot(size, data, iu, df_info = df_info)
li$qq_plot
li$hist_plot
# test QQ_plot
ubar <- mean(da$Value)
qq_plot <- QQ_plot(data, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
QQ_plot(data, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
QQ_plot(data, group = da$Product, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
#' @param info_names character vector with the same length as data,
#'        to replace names(info) to show on hover. It doesn't include x-variable and
#'        y-varialbe. xlab and ylab will be used for x-variable and y-variable.
#' @param title plot title
#' @param xlab x-axis label
#' @param ylab y-axis label
#' @param qprobs numeric vector with length 2. Rrepresents the quantitles used to
#' \construct the Q-Q line
#' @param plot "plotly" for plotly, other will use ggplot
#' @export
QQ_plot <- function(data, group= 1,  dist= "norm", dparams= list(), df_info= NULL,
info_names= NULL, title= "Q-Q Plot", xlab= "Theoretical",
ylab= "Sample", qprobs = c(.25, .75), detrend = FALSE,
identity= FALSE, qtype= 7, colors= color_set4, plotly= TRUE) {
# if df_infor is vector
if (is.vector(df_info)) df_info <- data_frame(info= df_info)
# remove NA
data <- data[! is.na(data)]
# error handling
if (!(dist %in% c(
"beta", "cauchy", "chisq", "exp", "f", "gamma", "geom",  "lnorm", "logis",
"norm", "nbinom", "pois", "t", "weibull")) &
length(dparams) == 0 &
table(sapply(formals(eval(parse(text = paste0("q", dist)))),
typeof))["symbol"] > 1) {
stop(
"MLE is currently not supported for custom distributions.\n",
"Please provide all the custom distribution parameters to 'dparams'.",
call. = FALSE
)
}
# error handling
if (qtype < 1 | qtype > 9) {
stop("Please provide a valid quantile type: ",
"'qtype' must be between 1 and 9.",
call. = FALSE)
}
if (length(qprobs) != 2) {
stop("'qprobs' must have length two.",
call = FALSE)
}
if (sum(qprobs > 1) + sum(qprobs < 0)) {
stop("'qprobs' cannot have any elements outside the probability domain [0,1].",
call = FALSE)
}
# match levels of colors to groups
groups <- unique(group)
if (length(groups) > length(colors)) {
n <- ceiling(length(groups) / length(colors))
colors <- rep(colors, n)
}
# QQ points and QQ lines
if (! is.null(df_info)) df_info_c <- data.frame()
df <- data.frame()
qqlines <- list()
for (gp in groups) {
x1 <- data[group == gp]
df_info1 <- df_info[group == gp, ]
qq_point <- QQ_points(x1, distribution = dist, dparams = dparams, qprobs = qprobs,
detrend = detrend, identity = identity,  qtype = qtype)
# ordering if_info
if (! is.null(df_info)) {
df_info1 <- df_info1[qq_point$order, ]
df_info_c <- rbind(df_info_c, df_info1)
}
# form dataframe for qq points
df1 <- data.frame(x= qq_point$theoretical, y= qq_point$sample, group= gp)
df <- rbind(df, df1)
# form list for qq lines
qqline <- QQ_line(x1, distribution = dist, dparams = dparams, qprobs = qprobs,
detrend = detrend, identity = identity,  qtype = qtype)
qqlines[[gp]] <- qqline
}
group <- df$group
df$group <- NULL
#--- Plot
if (plotly) {
#--- coordinates limits
xmi <- min(df$x, na.rm = T)
xma <-  max(df$x, na.rm = T)
rg <- (xma - xmi) * 0.2
xmin= xmi - rg
xmax = xma + rg
ymi <- min(df$y, na.rm = T)
yma <-  max(df$y, na.rm = T)
rg <- (yma - ymi) * 0.2
ymin= ymi - rg
ymax = yma + rg
#--- Hover text information
if (! is.null(df_info)) {
df <- cbind(df, df_info_c)
if (is.null(info_names)) info_names <- names(df_info)
info_names <- c(xlab, ylab, info_names)
} else {
info_names <- c(xlab, ylab)
}
df <- df %>% filter(!is.na(y))
df$x <- round(df$x, 3)
df$y <- round(df$y, 3)
hText <- apply(df, 1, function(x) paste(info_names, x, sep= ": "))
hText <- apply(hText, 2, function(x) paste(x, collapse = " <br> "))
#--- Plotly
if (length(groups) == 1) {
p <- plot_ly(data= df, x= ~x, y= ~y,  type = 'scatter', mode = 'markers',
color= I(colors[1]), hoverinfo= "text", text= hText)
legendx= FALSE
} else {
p <- plot_ly(data= df, x= ~x, y= ~y,  type = 'scatter', mode = 'markers',
color = ~group, colors = colors, hoverinfo= "text", text= hText)
legendx= TRUE
}
for (i in 1:length(groups)) {
qq_line <- qqlines[[i]]
p <- p %>%
add_segments(x= qq_line$xx[1], xend= qq_line$xx[2],
y= qq_line$yy[1], yend= qq_line$yy[2],
color= I(colors[i]), showlegend= FALSE)
}
p %>%
plotly::layout(showlegend= legendx, title= title,
xaxis= list(title= xlab, zeroline= FALSE, range= c(xmin, xmax)),
yaxis= list(title= ylab, zeroline= FALSE, range= c(ymin, ymax)))
} else {
df$group <- group
if (length(groups) == 1) {
slope <- diff(qq_line$yy)/diff(qq_line$xx)
int <- qq_line$yy[1L] - slope * qq_line$xx[1L]
p <- ggplot(df, aes(x= x, y= y)) +
geom_point(color= "steelblue4", alpha= 0.7, size= 2) +
geom_abline(slope = slope, intercept = int, color= "#708090")
} else {
p <- ggplot(df, aes(x= x, y= y, color= group, group= group)) +
geom_point(alpha = 0.7, size= 2)
for (i in 1:length(groups)) {
qq_line <- qqlines[[i]]
slope <- diff(qq_line$yy)/diff(qq_line$xx)
int <- qq_line$yy[1L] - slope * qq_line$xx[1L]
qq_line <- qqlines[[i]]
p <- p + geom_abline(slope = slope, intercept = int, color= colors[i])
}
p + labs(title= title, x= xlab, y= ylab) +
scale_color_manual(values = colors) +
theme(plot.title = element_text(size= 14, hjust = 0.5, vjust = 1),
plot.background = element_rect(colour = NA, fill = NA),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
axis.ticks = element_blank())
}
QQ_plot(data, group = da$Product, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
QQ_plot(data, group = da$Product, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Test", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
QQ_plot(data, group = da$Product, dist= "pois", dparams= list(lambda= ubar),
df_info= df_info, info_names= info_names, title= "",
xlab= "Theoretical", ylab= "Sample data", qprobs = c(.25, .75),
detrend = FALSE, identity= FALSE, qtype= 7)
library(ProcessCapability)
?fun_Cp
